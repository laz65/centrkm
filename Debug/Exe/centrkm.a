;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.12 Advanced
;Automatic Program Generator
;© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 30/10 2015
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATmega328P
;Program type            : Application
;AVR Core Clock frequency: 16,000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 512
;*******************************************************/
;
;#include <mega328p.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x01
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x0E
;PCODE: $00000004 VOL: 0
	.EQU __sm_adc_noise_red=0x02
;PCODE: $00000005 VOL: 0
	.EQU __sm_powerdown=0x04
;PCODE: $00000006 VOL: 0
	.EQU __sm_powersave=0x06
;PCODE: $00000007 VOL: 0
	.EQU __sm_standby=0x0C
;PCODE: $00000008 VOL: 0
	.EQU __sm_ext_standby=0x0E
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=smcr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;//#include <delay.h>
;
;// Alphanumeric LCD functions
;#include <alcd.h>
;
;#define vyh_plus PORTD.4
;#define vyh_minus PORTD.2
;#define zvuk PORTD.5
;#define vyh_t0 DDRD.6
;#define kn1 PINC.0
;#define kn2 PINC.1
;#define kn3 PINC.2
;#define shim OCR2B
;
;
;
;// Declare your global variables here
;
;
;
;// Declare your global variables here   \
;
;// таблице синуса для формирования синусоидального напряжения
;flash unsigned char sinus[] = {130,133,136,139,143,146,149,152,155,158,161,164,167,170,173,176,178,
;181,184,187,190,192,195,198,200,203,205,208,210,212,215,217,219,221,223,225,227,229,231,233,234,236,
;238,239,240,242,243,244,245,247,248,249,249,250,251,252,252,253,253,253,254,254,254,254,254,254,254,
;253,253,253,252,252,251,250,249,249,248,247,245,244,243,242,240,239,238,236,234,233,231,229,227,225,
;223,221,219,217,215,212,210,208,205,203,200,198,195,192,190,187,184,181,178,176,173,170,167,164,161,
;158,155,152,149,146,143,139,136,133,130,127,124,121,118,115,111,108,105,102,99,96,93,90,87,84,81,78,
;76,73,70,67,64,62,59,56,54,51,49,46,44,42,39,37,35,33,31,29,27,25,23,21,20,18,16,15,14,12,11,10,9,7,
;6,5,5,4,3,2,2,1,1,1,0,0,0,0,0,0,0,1,1,1,2,2,3,4,5,5,6,7,9,10,11,12,14,15,16,18,20,21,23,25,27,29,31,33,35,37,39,42,
;44,46,49,51,54,56,59,62,64,67,70,73,76,78,81,84,87,90,93,96,99,102,105,108,111,115,118,121,124,127};
;
;unsigned int ton1,a;
;unsigned char z, n, j, s435, period, per_old, per_new, i, sig_bayt, sig_bit, sost[32], page, p10, x_dysp, y_dysp, pos;
;unsigned long time;
;bit flag435, trevoga, pit_ok, sinc_err, pit_err, fix, nagh, received_ok;
;
;eeprom long procfreq = 16000000;
;eeprom unsigned char esost[32] ;
;
;
;// Standard Input/Output functions
;#include <stdio.h>
;
;// Timer 0 overflow interrupt service routine
;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
; 0000 0048 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0049 // Place your code here
; 0000 004A a = a + ton1;      // Формирование синусоиды (форма в массиве sinus)
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 004B z = a>>8 ;
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 004C OCR0A=sinus[z];
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 004D 
; 0000 004E }
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;
;// Timer1 overflow interrupt service routine
;interrupt [TIM1_OVF] void timer1_ovf_isr(void)
; 0000 0052 {
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 0053 // Place your code here
; 0000 0054     time = time + 1;    // для измерения задержек (единица = 4 мС)
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0000 0055 }
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;
;// Analog Comparator interrupt service routine
;interrupt [ANA_COMP] void ana_comp_isr(void)
; 0000 0059 {
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0000 005A // Place your code here
; 0000 005B per_old = per_new;
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 005C per_new = TCNT1L;
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 005D per_new = TCNT1H;
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0000 005E if(per_old < per_new) period = per_new - per_old; else period = per_new + (255 - per_old);
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 005F     if ((period > 0x80)&&(period < 0xA0)) //если период соответствует частоте 435 Гц
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0000 0060     {
; 0000 0061        if (s435++ > 4) flag435 = 1 ;  // обработка при обнаружени частоты 435
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0000 0062     }
;PCODE: $00000048 VOL: 0
; 0000 0063     else s435 = 0;
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 0064 }
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;
;// TWI functions
;#include <twi.h>
;
;// TWI Slave receive buffer
;#define TWI_RX_BUFFER_SIZE 32
;unsigned char twi_rx_buffer[TWI_RX_BUFFER_SIZE];
;
;// TWI Slave transmit buffer
;#define TWI_TX_BUFFER_SIZE 32
;unsigned char twi_tx_buffer[TWI_TX_BUFFER_SIZE];
;
;// TWI Slave receive handler
;// This handler is called everytime a byte
;// is received by the TWI slave
;bool twi_rx_handler(bool rx_complete)
; 0000 0075 {
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0000 0076 if (twi_result==TWI_RES_OK)
;PCODE: $00000052 VOL: 0
;	rx_complete -> Y+0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 0077    {
; 0000 0078    // A data byte was received without error
; 0000 0079    // and it was stored at twi_rx_buffer[twi_rx_index]
; 0000 007A    // Place your code here to process the received byte
; 0000 007B    // Note: processing must be VERY FAST, otherwise
; 0000 007C    // it is better to process the received data when
; 0000 007D    // all communication with the master has finished
; 0000 007E    received_ok=true;
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0000 007F    }
; 0000 0080 else
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0000 0081    {
; 0000 0082    // Receive error
; 0000 0083    // Place your code here to process the error
; 0000 0084    received_ok=false;
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0000 0085    return false; // Stop further reception
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 0086    }
;PCODE: $0000005F VOL: 0
; 0000 0087 
; 0000 0088 // The TWI master has finished transmitting data?
; 0000 0089 if (rx_complete) return false; // Yes, no more bytes to receive
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0000 008A 
; 0000 008B // Signal to the TWI master that the TWI slave
; 0000 008C // is ready to accept more data, as long as
; 0000 008D // there is enough space in the receive buffer
; 0000 008E return (twi_rx_index<sizeof(twi_rx_buffer));
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
; 0000 008F }
;PCODE: $0000006C VOL: 0
;
;// TWI Slave transmission handler
;// This handler is called for the first time when the
;// transmission from the TWI slave to the master
;// is about to begin, returning the number of bytes
;// that need to be transmitted
;// The second time the handler is called when the
;// transmission has finished
;// In this case it must return 0
;unsigned char twi_tx_handler(bool tx_complete)
; 0000 009A {
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0000 009B if (tx_complete==false)
;PCODE: $0000006F VOL: 0
;	tx_complete -> Y+0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0000 009C    {
; 0000 009D    // Transmission from slave to master is about to start
; 0000 009E    // Return the number of bytes to transmit
; 0000 009F    return sizeof(twi_tx_buffer);
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
; 0000 00A0    }
; 0000 00A1 
; 0000 00A2 // Transmission from slave to master has finished
; 0000 00A3 // Place code here to eventually process data from
; 0000 00A4 // the twi_rx_buffer, if it wasn't yet processed
; 0000 00A5 // in the twi_rx_handler
; 0000 00A6 
; 0000 00A7 if (received_ok)
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0000 00A8    {
; 0000 00A9         for (j=0;j<32;j++)
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0000 00AA         {
; 0000 00AB             sost[j] = twi_rx_buffer[j]; // действия при приеме
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0000 00AC             twi_tx_buffer[j] = esost[j];
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
; 0000 00AD //            sost[j] = 0;
; 0000 00AE         }
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
; 0000 00AF    }
; 0000 00B0    else
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0000 00B1    {
; 0000 00B2         lcd_clear();
;PCODE: $00000099 VOL: 0
; 0000 00B3         lcd_putsf(" ERR_receive ");
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0000 00B4    }
;PCODE: $0000009D VOL: 0
; 0000 00B5 
; 0000 00B6 // No more bytes to send in this transaction
; 0000 00B7 return 0;
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
; 0000 00B8 }
;PCODE: $000000A1 VOL: 0
;
;
;
;
;unsigned int fdel(int freq)
; 0000 00BE {
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
; 0000 00BF     long koeff;              //определение коеффициента деления для получения частоты
; 0000 00C0     int delit;
; 0000 00C1     koeff = (16777216000/procfreq);
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;	freq -> Y+6
;	koeff -> Y+2
;	delit -> R16,R17
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
; 0000 00C2     koeff = (long)(koeff * freq);
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
; 0000 00C3     delit = koeff / 1000;
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
; 0000 00C4     return delit;
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
; 0000 00C5 }
;PCODE: $000000C0 VOL: 0
;
;void clear_lcd(void)
; 0000 00C8 {
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
; 0000 00C9     lcd_gotoxy(0,0);
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
; 0000 00CA     lcd_putsf("                                                                ");
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
; 0000 00CB 
; 0000 00CC }
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;
;
;void main(void)
; 0000 00D0 {
;PCODE: $000000CC VOL: 0
; 0000 00D1 // Declare your local variables here
; 0000 00D2 
; 0000 00D3 // Crystal Oscillator division factor: 1
; 0000 00D4 #pragma optsize-
; 0000 00D5 CLKPR=(1<<CLKPCE);
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
; 0000 00D6 CLKPR=(0<<CLKPCE) | (0<<CLKPS3) | (0<<CLKPS2) | (0<<CLKPS1) | (0<<CLKPS0);
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
; 0000 00D7 #ifdef _OPTIMIZE_SIZE_
; 0000 00D8 #pragma optsize+
; 0000 00D9 #endif
; 0000 00DA 
; 0000 00DB // Input/Output Ports initialization
; 0000 00DC // Port B initialization
; 0000 00DD // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 00DE DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
; 0000 00DF // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 00E0 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
; 0000 00E1 
; 0000 00E2 // Port C initialization
; 0000 00E3 // Function: Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 00E4 DDRC=(0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
; 0000 00E5 // State: Bit6=T Bit5=T Bit4=T Bit3=T Bit2=P Bit1=P Bit0=P
; 0000 00E6 PORTC=(0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (1<<PORTC2) | (1<<PORTC1) | (1<<PORTC0);
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
; 0000 00E7 
; 0000 00E8 // Port D initialization
; 0000 00E9 // Function: Bit7=In Bit6=In Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=In Bit0=In
; 0000 00EA DDRD=(0<<DDD7) | (0<<DDD6) | (1<<DDD5) | (1<<DDD4) | (1<<DDD3) | (1<<DDD2) | (0<<DDD1) | (0<<DDD0);
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
; 0000 00EB // State: Bit7=P Bit6=T Bit5=0 Bit4=0 Bit3=0 Bit2=T Bit1=T Bit0=T
; 0000 00EC PORTD=(1<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
; 0000 00ED 
; 0000 00EE // Timer/Counter 0 initialization
; 0000 00EF // Clock source: System Clock
; 0000 00F0 // Clock value: 16000,000 kHz
; 0000 00F1 // Mode: Fast PWM top=0xFF
; 0000 00F2 // OC0A output: Non-Inverted PWM
; 0000 00F3 // OC0B output: Disconnected
; 0000 00F4 // Timer Period: 0,016 ms
; 0000 00F5 // Output Pulse(s):
; 0000 00F6 // OC0A Period: 0,016 ms Width: 0 us
; 0000 00F7 TCCR0A=(1<<COM0A1) | (0<<COM0A0) | (0<<COM0B1) | (0<<COM0B0) | (1<<WGM01) | (1<<WGM00);
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
; 0000 00F8 TCCR0B=(0<<WGM02) | (0<<CS02) | (0<<CS01) | (1<<CS00);
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
; 0000 00F9 TCNT0=0x00;
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
; 0000 00FA OCR0A=0x00;
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
; 0000 00FB OCR0B=0x00;
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
; 0000 00FC 
; 0000 00FD 
; 0000 00FE // Timer/Counter 1 initialization
; 0000 00FF // Clock source: System Clock
; 0000 0100 // Clock value: 16000,000 kHz
; 0000 0101 // Mode: Normal top=0xFFFF
; 0000 0102 // OC1A output: Disconnected
; 0000 0103 // OC1B output: Disconnected
; 0000 0104 // Noise Canceler: Off
; 0000 0105 // Input Capture on Falling Edge
; 0000 0106 // Timer Period: 4,096 ms
; 0000 0107 // Timer1 Overflow Interrupt: On
; 0000 0108 // Input Capture Interrupt: Off
; 0000 0109 // Compare A Match Interrupt: Off
; 0000 010A // Compare B Match Interrupt: Off
; 0000 010B TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
; 0000 010C TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (1<<CS10);
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
; 0000 010D TCNT1H=0x00;
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
; 0000 010E TCNT1L=0x00;
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
; 0000 010F ICR1H=0x00;
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
; 0000 0110 ICR1L=0x00;
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
; 0000 0111 OCR1AH=0x00;
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
; 0000 0112 OCR1AL=0x00;
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
; 0000 0113 OCR1BH=0x00;
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
; 0000 0114 OCR1BL=0x00;
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
; 0000 0115 
; 0000 0116 // Timer/Counter 2 initialization
; 0000 0117 // Clock source: System Clock
; 0000 0118 // Clock value: 16000,000 kHz
; 0000 0119 // Mode: Fast PWM top=0xFF
; 0000 011A // OC2A output: Disconnected
; 0000 011B // OC2B output: Non-Inverted PWM
; 0000 011C // Timer Period: 0,016 ms
; 0000 011D // Output Pulse(s):
; 0000 011E // OC2B Period: 0,016 ms Width: 8,0314 us
; 0000 011F ASSR=(0<<EXCLK) | (0<<AS2);
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
; 0000 0120 TCCR2A=(0<<COM2A1) | (0<<COM2A0) | (1<<COM2B1) | (0<<COM2B0) | (1<<WGM21) | (1<<WGM20);
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
; 0000 0121 TCCR2B=(0<<WGM22) | (0<<CS22) | (0<<CS21) | (1<<CS20);
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
; 0000 0122 TCNT2=0x00;
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
; 0000 0123 OCR2A=0x00;
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
; 0000 0124 OCR2B=0x00;
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
; 0000 0125 
; 0000 0126 // Timer/Counter 0 Interrupt(s) initialization
; 0000 0127 TIMSK0=(0<<OCIE0B) | (0<<OCIE0A) | (1<<TOIE0);
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
; 0000 0128 
; 0000 0129 // Timer/Counter 1 Interrupt(s) initialization
; 0000 012A TIMSK1=(0<<ICIE1) | (0<<OCIE1B) | (0<<OCIE1A) | (1<<TOIE1);
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
; 0000 012B 
; 0000 012C // Timer/Counter 2 Interrupt(s) initialization
; 0000 012D TIMSK2=(0<<OCIE2B) | (0<<OCIE2A) | (0<<TOIE2);
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
; 0000 012E 
; 0000 012F // External Interrupt(s) initialization
; 0000 0130 // INT0: Off
; 0000 0131 // INT1: Off
; 0000 0132 // Interrupt on any change on pins PCINT0-7: Off
; 0000 0133 // Interrupt on any change on pins PCINT8-14: Off
; 0000 0134 // Interrupt on any change on pins PCINT16-23: Off
; 0000 0135 EICRA=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
; 0000 0136 EIMSK=(0<<INT1) | (0<<INT0);
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
; 0000 0137 PCICR=(0<<PCIE2) | (0<<PCIE1) | (0<<PCIE0);
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
; 0000 0138 
; 0000 0139 // USART initialization
; 0000 013A // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 013B // USART Receiver: On
; 0000 013C // USART Transmitter: On
; 0000 013D // USART0 Mode: Asynchronous
; 0000 013E // USART Baud Rate: 9600
; 0000 013F UCSR0A=(0<<RXC0) | (0<<TXC0) | (0<<UDRE0) | (0<<FE0) | (0<<DOR0) | (0<<UPE0) | (0<<U2X0) | (0<<MPCM0);
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
; 0000 0140 UCSR0B=(0<<RXCIE0) | (0<<TXCIE0) | (0<<UDRIE0) | (1<<RXEN0) | (1<<TXEN0) | (0<<UCSZ02) | (0<<RXB80) | (0<<TXB80);
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
; 0000 0141 UCSR0C=(0<<UMSEL01) | (0<<UMSEL00) | (0<<UPM01) | (0<<UPM00) | (0<<USBS0) | (1<<UCSZ01) | (1<<UCSZ00) | (0<<UCPOL0);
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
; 0000 0142 UBRR0H=0x00;
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
; 0000 0143 UBRR0L=0x67;
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
; 0000 0144 
; 0000 0145 // Analog Comparator initialization
; 0000 0146 // Analog Comparator: On
; 0000 0147 // The Analog Comparator's positive input is
; 0000 0148 // connected to the AIN0 pin
; 0000 0149 // The Analog Comparator's negative input is
; 0000 014A // connected to the AIN1 pin
; 0000 014B // Interrupt on Rising Output Edge
; 0000 014C // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0000 014D ACSR=(0<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (1<<ACIE) | (0<<ACIC) | (1<<ACIS1) | (1<<ACIS0);
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
; 0000 014E ADCSRB=(0<<ACME);
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
; 0000 014F // Digital input buffer on AIN0: On
; 0000 0150 // Digital input buffer on AIN1: On
; 0000 0151 DIDR1=(0<<AIN0D) | (0<<AIN1D);
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
; 0000 0152 
; 0000 0153 // ADC initialization
; 0000 0154 // ADC disabled
; 0000 0155 ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
; 0000 0156 
; 0000 0157 // SPI initialization
; 0000 0158 // SPI disabled
; 0000 0159 SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
; 0000 015A 
; 0000 015B // TWI initialization
; 0000 015C // Mode: TWI Slave
; 0000 015D // Match Any Slave Address: Off
; 0000 015E // I2C Bus Slave Address: 0x21
; 0000 015F twi_slave_init(false,0x21,twi_rx_buffer,sizeof(twi_rx_buffer),twi_tx_buffer,twi_rx_handler,twi_tx_handler);
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
; 0000 0160 
; 0000 0161 // Alphanumeric LCD initialization
; 0000 0162 // Connections are specified in the
; 0000 0163 // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
; 0000 0164 // RS - PORTB Bit 0
; 0000 0165 // RD - PORTB Bit 7
; 0000 0166 // EN - PORTB Bit 1
; 0000 0167 // D4 - PORTB Bit 2
; 0000 0168 // D5 - PORTB Bit 3
; 0000 0169 // D6 - PORTB Bit 4
; 0000 016A // D7 - PORTB Bit 5
; 0000 016B // Characters/line: 16
; 0000 016C lcd_init(16);
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
; 0000 016D lcd_putsf("  WELCOME!   ");
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
; 0000 016E // Global enable interrupts
; 0000 016F 
; 0000 0170 ACSR |= (1<<ACIE); // включить перывания от компарат
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
; 0000 0171 ACSR &= ~(1<<ACIE); // выкл прер компар
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
; 0000 0172 
; 0000 0173 vyh_t0 = 0;             // выкл таймер 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
; 0000 0174 TCCR0A &= ~(1<<CS00);
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
; 0000 0175 
; 0000 0176 
; 0000 0177 
; 0000 0178 procfreq = 16000000 ;
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
; 0000 0179 ton1 = fdel(1080);
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
; 0000 017A 
; 0000 017B 
; 0000 017C for (n = 0; n < 32; n++)
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
; 0000 017D {
; 0000 017E     sost[n] = esost[n];
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
; 0000 017F     twi_tx_buffer[n] = sost[n];
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
; 0000 0180 }
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
; 0000 0181 //PORTD.4 = 1;
; 0000 0182 //delay_ms(100);
; 0000 0183 //PORTD.4 = 0;
; 0000 0184 //PORTD.2 = 1;
; 0000 0185 #asm("sei")
;PCODE: $00000168 VOL: 0
	sei
;PCODE: $00000169 VOL: 0
; 0000 0186 //vyh_plus = 1;
; 0000 0187 OCR2B=0x00; // выключение преобразователя
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
; 0000 0188 //          time = 0;
; 0000 0189 //          while (time < 1000) #asm("wdr");  // задержка 25 мСек
; 0000 018A //
; 0000 018B // OCR2B=0x50; // выключение преобразователя
; 0000 018C //
; 0000 018D //          time = 0;
; 0000 018E //          while (time < 1000) #asm("wdr");  // задержка 25 мСек
; 0000 018F //
; 0000 0190 //OCR2B=0x50; // выключение преобразователя
; 0000 0191 //
; 0000 0192 //          time = 0;
; 0000 0193 //          while (time < 1000) #asm("wdr");  // задержка 25 мСек
; 0000 0194 // vyh_plus = 0;
; 0000 0195 // vyh_minus = 1;
; 0000 0196 //
; 0000 0197 //OCR2B=0xB0; // выключение преобразователя
; 0000 0198 //
; 0000 0199 //          time = 0;
; 0000 019A //          while (time < 1000) #asm("wdr");  // задержка 25 мСек
; 0000 019B //
; 0000 019C //
; 0000 019D //OCR2B=0xFF; // выключение преобразователя
; 0000 019E //
; 0000 019F 
; 0000 01A0     while (1)
;PCODE: $0000016C VOL: 0
; 0000 01A1     {
; 0000 01A2       for (i = 0 ; i < 128 ; i++)
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
; 0000 01A3       {
; 0000 01A4           if(kn1&kn3) nagh = 0;  // сброс флага нажатия при отпущеной кнопке
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
; 0000 01A5           if(!kn1)
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
; 0000 01A6           {
; 0000 01A7             if(!nagh)  // если кнопка только-что нажата
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
; 0000 01A8             {
; 0000 01A9                 nagh = 1;
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
; 0000 01AA                 lcd_gotoxy(3,0);
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
; 0000 01AB                 if (fix)
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
; 0000 01AC                 {
; 0000 01AD                     fix  = 0;         // если была включена фиксация, - выключить
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
; 0000 01AE                     lcd_putchar(' ');
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
; 0000 01AF                 }
; 0000 01B0                 else
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
; 0000 01B1                 {
; 0000 01B2                     fix = 1;         // включить фиксацию
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
; 0000 01B3                     page = (i / 32); // на какой странице зафиксировано
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
; 0000 01B4                     if (page == 0) page = 4;
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
; 0000 01B5                     page--;
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
; 0000 01B6                     page *= 32;
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
; 0000 01B7                     pos = 0;
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
; 0000 01B8                     x_dysp = 5;
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
; 0000 01B9                     y_dysp = 0;
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
; 0000 01BA                     lcd_putchar('F');
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
; 0000 01BB                 }
;PCODE: $000001AE VOL: 0
; 0000 01BC 
; 0000 01BD             }
; 0000 01BE 
; 0000 01BF           }
;PCODE: $000001AF VOL: 0
; 0000 01C0           if(fix)
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
; 0000 01C1           {
; 0000 01C2             if(p10++ == 0)
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
; 0000 01C3             {
; 0000 01C4             // отображение подч
; 0000 01C5 
; 0000 01C6                     lcd_gotoxy(x_dysp,y_dysp);
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
; 0000 01C7                     lcd_putchar('_');
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
; 0000 01C8 
; 0000 01C9             }
; 0000 01CA             if(p10 == 8)
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
; 0000 01CB             {
; 0000 01CC                 // отображение текущего состояние точки n
; 0000 01CD 
; 0000 01CE                                 sig_bayt = (pos+page) / 4;    // текущий байт в слове состояния
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
; 0000 01CF                                 sig_bit = ((pos + page) - (sig_bayt * 4)) * 2;   // текущая двухбитовая пара в слове сос ...
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
; 0000 01D0                                 lcd_gotoxy(x_dysp,y_dysp);
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
; 0000 01D1                                 if((sost[sig_bayt]&(1<<sig_bit)))
;PCODE: $000001D8 VOL: 0
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
;PCODE: $000001E1 VOL: 0
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
; 0000 01D2                                 {
; 0000 01D3                                      if((sost[sig_bayt]&(1<<(sig_bit+1)))) lcd_putchar(255);
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0
;PCODE: $000001E6 VOL: 0
;PCODE: $000001E7 VOL: 0
;PCODE: $000001E8 VOL: 0
;PCODE: $000001E9 VOL: 0
;PCODE: $000001EA VOL: 0
;PCODE: $000001EB VOL: 0
;PCODE: $000001EC VOL: 0
;PCODE: $000001ED VOL: 0
;PCODE: $000001EE VOL: 0
;PCODE: $000001EF VOL: 0
;PCODE: $000001F0 VOL: 0
;PCODE: $000001F1 VOL: 0
;PCODE: $000001F2 VOL: 0
;PCODE: $000001F3 VOL: 0
; 0000 01D4                                      else  lcd_putchar('.');
;PCODE: $000001F4 VOL: 0
;PCODE: $000001F5 VOL: 0
;PCODE: $000001F6 VOL: 0
;PCODE: $000001F7 VOL: 0
; 0000 01D5                                 } else lcd_putchar(' ');
;PCODE: $000001F8 VOL: 0
;PCODE: $000001F9 VOL: 0
;PCODE: $000001FA VOL: 0
;PCODE: $000001FB VOL: 0
;PCODE: $000001FC VOL: 0
; 0000 01D6 
; 0000 01D7 
; 0000 01D8             }
;PCODE: $000001FD VOL: 0
; 0000 01D9             if(p10 > 16)
;PCODE: $000001FE VOL: 0
;PCODE: $000001FF VOL: 0
;PCODE: $00000200 VOL: 0
;PCODE: $00000201 VOL: 0
; 0000 01DA             {
; 0000 01DB                 p10 = 0;
;PCODE: $00000202 VOL: 0
;PCODE: $00000203 VOL: 0
; 0000 01DC 
; 0000 01DD                 if(!kn2)
;PCODE: $00000204 VOL: 0
;PCODE: $00000205 VOL: 0
;PCODE: $00000206 VOL: 0
; 0000 01DE                 {
; 0000 01DF                     if(++pos >  30)
;PCODE: $00000207 VOL: 0
;PCODE: $00000208 VOL: 0
;PCODE: $00000209 VOL: 0
;PCODE: $0000020A VOL: 0
;PCODE: $0000020B VOL: 0
; 0000 01E0                     {
; 0000 01E1                         pos = 0;
;PCODE: $0000020C VOL: 0
;PCODE: $0000020D VOL: 0
; 0000 01E2                         x_dysp = 3;
;PCODE: $0000020E VOL: 0
;PCODE: $0000020F VOL: 0
; 0000 01E3                         y_dysp = 0;
;PCODE: $00000210 VOL: 0
;PCODE: $00000211 VOL: 0
; 0000 01E4                     }
; 0000 01E5                     else if(pos == 15) pos++;
;PCODE: $00000212 VOL: 0
;PCODE: $00000213 VOL: 0
;PCODE: $00000214 VOL: 0
;PCODE: $00000215 VOL: 0
;PCODE: $00000216 VOL: 0
;PCODE: $00000217 VOL: 0
;PCODE: $00000218 VOL: 0
;PCODE: $00000219 VOL: 0
; 0000 01E6                     x_dysp++;
;PCODE: $0000021A VOL: 0
;PCODE: $0000021B VOL: 0
;PCODE: $0000021C VOL: 0
;PCODE: $0000021D VOL: 0
;PCODE: $0000021E VOL: 0
; 0000 01E7                     if(++x_dysp > 15)
;PCODE: $0000021F VOL: 0
;PCODE: $00000220 VOL: 0
;PCODE: $00000221 VOL: 0
;PCODE: $00000222 VOL: 0
;PCODE: $00000223 VOL: 0
; 0000 01E8                     {
; 0000 01E9                         y_dysp++;
;PCODE: $00000224 VOL: 0
;PCODE: $00000225 VOL: 0
;PCODE: $00000226 VOL: 0
; 0000 01EA                         x_dysp = 1;
;PCODE: $00000227 VOL: 0
;PCODE: $00000228 VOL: 0
; 0000 01EB                     }
; 0000 01EC 
; 0000 01ED                 }
;PCODE: $00000229 VOL: 0
; 0000 01EE                 if(!kn3)
;PCODE: $0000022A VOL: 0
;PCODE: $0000022B VOL: 0
;PCODE: $0000022C VOL: 0
;PCODE: $0000022D VOL: 0
; 0000 01EF                 {
; 0000 01F0                     if(!nagh)  // если кнопка только-что нажата
;PCODE: $0000022E VOL: 0
;PCODE: $0000022F VOL: 0
;PCODE: $00000230 VOL: 0
; 0000 01F1                     {
; 0000 01F2                     nagh = 1;
;PCODE: $00000231 VOL: 0
;PCODE: $00000232 VOL: 0
; 0000 01F3                      // включение - выключение охраны
; 0000 01F4                     lcd_gotoxy(x_dysp,y_dysp);
;PCODE: $00000233 VOL: 0
;PCODE: $00000234 VOL: 0
;PCODE: $00000235 VOL: 0
;PCODE: $00000236 VOL: 0
; 0000 01F5                                 sig_bayt = (pos+page) / 4;    // текущий байт в слове состояния
;PCODE: $00000237 VOL: 0
;PCODE: $00000238 VOL: 0
;PCODE: $00000239 VOL: 0
;PCODE: $0000023A VOL: 0
;PCODE: $0000023B VOL: 0
;PCODE: $0000023C VOL: 0
;PCODE: $0000023D VOL: 0
;PCODE: $0000023E VOL: 0
; 0000 01F6                                 sig_bit = ((pos + page) - (sig_bayt * 4)) * 2;   // текущая двухбитовая пара в слове сос ...
;PCODE: $0000023F VOL: 0
;PCODE: $00000240 VOL: 0
;PCODE: $00000241 VOL: 0
;PCODE: $00000242 VOL: 0
;PCODE: $00000243 VOL: 0
;PCODE: $00000244 VOL: 0
;PCODE: $00000245 VOL: 0
;PCODE: $00000246 VOL: 0
;PCODE: $00000247 VOL: 0
; 0000 01F7                                 if((sost[sig_bayt]&(1<<sig_bit)))
;PCODE: $00000248 VOL: 0
;PCODE: $00000249 VOL: 0
;PCODE: $0000024A VOL: 0
;PCODE: $0000024B VOL: 0
;PCODE: $0000024C VOL: 0
;PCODE: $0000024D VOL: 0
;PCODE: $0000024E VOL: 0
;PCODE: $0000024F VOL: 0
;PCODE: $00000250 VOL: 0
;PCODE: $00000251 VOL: 0
;PCODE: $00000252 VOL: 0
;PCODE: $00000253 VOL: 0
; 0000 01F8                                 {
; 0000 01F9                                     sost[sig_bayt] &= ~(1<<sig_bit);     // выкл. охрану
;PCODE: $00000254 VOL: 0
;PCODE: $00000255 VOL: 0
;PCODE: $00000256 VOL: 0
;PCODE: $00000257 VOL: 0
;PCODE: $00000258 VOL: 0
;PCODE: $00000259 VOL: 0
;PCODE: $0000025A VOL: 0
;PCODE: $0000025B VOL: 0
;PCODE: $0000025C VOL: 0
;PCODE: $0000025D VOL: 0
;PCODE: $0000025E VOL: 0
;PCODE: $0000025F VOL: 0
; 0000 01FA                                     lcd_putchar(' ');
;PCODE: $00000260 VOL: 0
;PCODE: $00000261 VOL: 0
; 0000 01FB                                 } else
;PCODE: $00000262 VOL: 0
;PCODE: $00000263 VOL: 0
; 0000 01FC                                 {
; 0000 01FD                                     sost[sig_bayt] |= (1<<sig_bit);      // включаем охрану
;PCODE: $00000264 VOL: 0
;PCODE: $00000265 VOL: 0
;PCODE: $00000266 VOL: 0
;PCODE: $00000267 VOL: 0
;PCODE: $00000268 VOL: 0
;PCODE: $00000269 VOL: 0
;PCODE: $0000026A VOL: 0
;PCODE: $0000026B VOL: 0
;PCODE: $0000026C VOL: 0
;PCODE: $0000026D VOL: 0
;PCODE: $0000026E VOL: 0
; 0000 01FE                                     lcd_putchar('.');
;PCODE: $0000026F VOL: 0
;PCODE: $00000270 VOL: 0
; 0000 01FF                                 }
;PCODE: $00000271 VOL: 0
; 0000 0200                     }
; 0000 0201                 }
;PCODE: $00000272 VOL: 0
; 0000 0202             }
;PCODE: $00000273 VOL: 0
; 0000 0203           }
;PCODE: $00000274 VOL: 0
; 0000 0204           sig_bayt = i / 4;    // текущий байт в слове состояния
;PCODE: $00000275 VOL: 0
;PCODE: $00000276 VOL: 0
;PCODE: $00000277 VOL: 0
;PCODE: $00000278 VOL: 0
;PCODE: $00000279 VOL: 0
;PCODE: $0000027A VOL: 0
; 0000 0205           sig_bit = (i - sig_bayt * 4) * 2;   // текущая двухбитовая пара в слове состояния
;PCODE: $0000027B VOL: 0
;PCODE: $0000027C VOL: 0
;PCODE: $0000027D VOL: 0
;PCODE: $0000027E VOL: 0
;PCODE: $0000027F VOL: 0
;PCODE: $00000280 VOL: 0
;PCODE: $00000281 VOL: 0
; 0000 0206           OCR0A=0x00;
;PCODE: $00000282 VOL: 0
;PCODE: $00000283 VOL: 0
; 0000 0207           a = 49728;
;PCODE: $00000284 VOL: 0
;PCODE: $00000285 VOL: 0
; 0000 0208           TCCR0A |= (1<<CS00);  // включить таймер 0;
;PCODE: $00000286 VOL: 0
;PCODE: $00000287 VOL: 0
;PCODE: $00000288 VOL: 0
; 0000 0209           TIMSK0 |= (1<<TOIE0); //
;PCODE: $00000289 VOL: 0
;PCODE: $0000028A VOL: 0
;PCODE: $0000028B VOL: 0
; 0000 020A           time = 0;
;PCODE: $0000028C VOL: 0
;PCODE: $0000028D VOL: 0
; 0000 020B           while (time < 6) #asm("wdr");  // задержка 25 мСек
;PCODE: $0000028E VOL: 0
;PCODE: $0000028F VOL: 0
;PCODE: $00000290 VOL: 0
;PCODE: $00000291 VOL: 0
;PCODE: $00000292 VOL: 0
	wdr
;PCODE: $00000293 VOL: 0
; 0000 020C           zvuk = 0;
;PCODE: $00000294 VOL: 0
;PCODE: $00000295 VOL: 0
;PCODE: $00000296 VOL: 0
;PCODE: $00000297 VOL: 0
; 0000 020D           if(i == 0) while (time < 75) #asm("wdr"); // если первый шаг, задержка 300 мСек
;PCODE: $00000298 VOL: 0
;PCODE: $00000299 VOL: 0
;PCODE: $0000029A VOL: 0
;PCODE: $0000029B VOL: 0
;PCODE: $0000029C VOL: 0
;PCODE: $0000029D VOL: 0
;PCODE: $0000029E VOL: 0
	wdr
;PCODE: $0000029F VOL: 0
; 0000 020E           TIMSK0 &= ~(1<<TOIE0); //
;PCODE: $000002A0 VOL: 0
;PCODE: $000002A1 VOL: 0
;PCODE: $000002A2 VOL: 0
;PCODE: $000002A3 VOL: 0
;PCODE: $000002A4 VOL: 0
;PCODE: $000002A5 VOL: 0
; 0000 020F           OCR0A=0x00;
;PCODE: $000002A6 VOL: 0
;PCODE: $000002A7 VOL: 0
; 0000 0210           a = 49728;
;PCODE: $000002A8 VOL: 0
;PCODE: $000002A9 VOL: 0
; 0000 0211           TCCR0A &= ~(1<<CS00);    // выкл таймер 0
;PCODE: $000002AA VOL: 0
;PCODE: $000002AB VOL: 0
;PCODE: $000002AC VOL: 0
; 0000 0212           vyh_t0 = 0;            // переключить а вход
;PCODE: $000002AD VOL: 0
;PCODE: $000002AE VOL: 0
; 0000 0213           ACSR |= (1<<ACIE); // включить перывания от компарат
;PCODE: $000002AF VOL: 0
;PCODE: $000002B0 VOL: 0
;PCODE: $000002B1 VOL: 0
; 0000 0214           time = 0;
;PCODE: $000002B2 VOL: 0
;PCODE: $000002B3 VOL: 0
; 0000 0215           while (time < 9) #asm("wdr");    // 25мСек + 12
;PCODE: $000002B4 VOL: 0
;PCODE: $000002B5 VOL: 0
;PCODE: $000002B6 VOL: 0
;PCODE: $000002B7 VOL: 0
;PCODE: $000002B8 VOL: 0
	wdr
;PCODE: $000002B9 VOL: 0
; 0000 0216           ACSR &= ~(1<<ACIE); // выкл прер компар
;PCODE: $000002BA VOL: 0
;PCODE: $000002BB VOL: 0
;PCODE: $000002BC VOL: 0
;PCODE: $000002BD VOL: 0
;PCODE: $000002BE VOL: 0
; 0000 0217           vyh_t0 = 1;            // переключить а вyход
;PCODE: $000002BF VOL: 0
;PCODE: $000002C0 VOL: 0
; 0000 0218           if (flag435) // если был отлет 435 Гц
;PCODE: $000002C1 VOL: 0
;PCODE: $000002C2 VOL: 0
;PCODE: $000002C3 VOL: 0
; 0000 0219           {
; 0000 021A             switch (i)
;PCODE: $000002C4 VOL: 0
;PCODE: $000002C5 VOL: 0
; 0000 021B             {
; 0000 021C                 case 31:
;PCODE: $000002C6 VOL: 0
;PCODE: $000002C7 VOL: 0
; 0000 021D                     // вывод первой половины на дисп
; 0000 021E                     if (!fix)
;PCODE: $000002C8 VOL: 0
;PCODE: $000002C9 VOL: 0
;PCODE: $000002CA VOL: 0
; 0000 021F                     {
; 0000 0220                         clear_lcd();
;PCODE: $000002CB VOL: 0
; 0000 0221                         lcd_gotoxy(0,0);
;PCODE: $000002CC VOL: 0
;PCODE: $000002CD VOL: 0
;PCODE: $000002CE VOL: 0
;PCODE: $000002CF VOL: 0
; 0000 0222                         lcd_putsf("1   ");
;PCODE: $000002D0 VOL: 0
;PCODE: $000002D1 VOL: 0
;PCODE: $000002D2 VOL: 0
; 0000 0223                         n = 1;
;PCODE: $000002D3 VOL: 0
;PCODE: $000002D4 VOL: 0
; 0000 0224                         for (sig_bayt = 0; sig_bayt < 8 ; sig_bayt++)
;PCODE: $000002D5 VOL: 0
;PCODE: $000002D6 VOL: 0
;PCODE: $000002D7 VOL: 0
;PCODE: $000002D8 VOL: 0
;PCODE: $000002D9 VOL: 0
;PCODE: $000002DA VOL: 0
;PCODE: $000002DB VOL: 0
;PCODE: $000002DC VOL: 0
;PCODE: $000002DD VOL: 0
;PCODE: $000002DE VOL: 0
; 0000 0225                         {
; 0000 0226                             for(sig_bit = 0; (sig_bayt == 3 || sig_bayt == 7)? sig_bit < 6: sig_bit < 8; sig_bit += 2)
;PCODE: $000002DF VOL: 0
;PCODE: $000002E0 VOL: 0
;PCODE: $000002E1 VOL: 0
;PCODE: $000002E2 VOL: 0
;PCODE: $000002E3 VOL: 0
;PCODE: $000002E4 VOL: 0
;PCODE: $000002E5 VOL: 0
;PCODE: $000002E6 VOL: 0
;PCODE: $000002E7 VOL: 0
;PCODE: $000002E8 VOL: 0
;PCODE: $000002E9 VOL: 0
;PCODE: $000002EA VOL: 0
;PCODE: $000002EB VOL: 0
;PCODE: $000002EC VOL: 0
;PCODE: $000002ED VOL: 0
;PCODE: $000002EE VOL: 0
;PCODE: $000002EF VOL: 0
;PCODE: $000002F0 VOL: 0
;PCODE: $000002F1 VOL: 0
;PCODE: $000002F2 VOL: 0
;PCODE: $000002F3 VOL: 0
;PCODE: $000002F4 VOL: 0
;PCODE: $000002F5 VOL: 0
;PCODE: $000002F6 VOL: 0
;PCODE: $000002F7 VOL: 0
;PCODE: $000002F8 VOL: 0
;PCODE: $000002F9 VOL: 0
; 0000 0227                             {
; 0000 0228                                 if(++n>10) n = 1;
;PCODE: $000002FA VOL: 0
;PCODE: $000002FB VOL: 0
;PCODE: $000002FC VOL: 0
;PCODE: $000002FD VOL: 0
;PCODE: $000002FE VOL: 0
;PCODE: $000002FF VOL: 0
; 0000 0229                                 lcd_putchar(47+n);
;PCODE: $00000300 VOL: 0
;PCODE: $00000301 VOL: 0
;PCODE: $00000302 VOL: 0
;PCODE: $00000303 VOL: 0
; 0000 022A                                 if((sost[sig_bayt]&(1<<sig_bit)))
;PCODE: $00000304 VOL: 0
;PCODE: $00000305 VOL: 0
;PCODE: $00000306 VOL: 0
;PCODE: $00000307 VOL: 0
;PCODE: $00000308 VOL: 0
;PCODE: $00000309 VOL: 0
;PCODE: $0000030A VOL: 0
;PCODE: $0000030B VOL: 0
;PCODE: $0000030C VOL: 0
;PCODE: $0000030D VOL: 0
;PCODE: $0000030E VOL: 0
;PCODE: $0000030F VOL: 0
; 0000 022B                                 {
; 0000 022C                                      if((sost[sig_bayt]&(1<<(sig_bit+1)))) lcd_putchar(255);
;PCODE: $00000310 VOL: 0
;PCODE: $00000311 VOL: 0
;PCODE: $00000312 VOL: 0
;PCODE: $00000313 VOL: 0
;PCODE: $00000314 VOL: 0
;PCODE: $00000315 VOL: 0
;PCODE: $00000316 VOL: 0
;PCODE: $00000317 VOL: 0
;PCODE: $00000318 VOL: 0
;PCODE: $00000319 VOL: 0
;PCODE: $0000031A VOL: 0
;PCODE: $0000031B VOL: 0
;PCODE: $0000031C VOL: 0
;PCODE: $0000031D VOL: 0
;PCODE: $0000031E VOL: 0
;PCODE: $0000031F VOL: 0
; 0000 022D                                      else  lcd_putchar('.');
;PCODE: $00000320 VOL: 0
;PCODE: $00000321 VOL: 0
;PCODE: $00000322 VOL: 0
;PCODE: $00000323 VOL: 0
; 0000 022E                                 } else lcd_putchar(' ');
;PCODE: $00000324 VOL: 0
;PCODE: $00000325 VOL: 0
;PCODE: $00000326 VOL: 0
;PCODE: $00000327 VOL: 0
;PCODE: $00000328 VOL: 0
; 0000 022F                             }
;PCODE: $00000329 VOL: 0
;PCODE: $0000032A VOL: 0
;PCODE: $0000032B VOL: 0
;PCODE: $0000032C VOL: 0
;PCODE: $0000032D VOL: 0
;PCODE: $0000032E VOL: 0
;PCODE: $0000032F VOL: 0
; 0000 0230                         }
;PCODE: $00000330 VOL: 0
;PCODE: $00000331 VOL: 0
;PCODE: $00000332 VOL: 0
;PCODE: $00000333 VOL: 0
;PCODE: $00000334 VOL: 0
;PCODE: $00000335 VOL: 0
; 0000 0231                     }
; 0000 0232                     pit_ok = 1;
;PCODE: $00000336 VOL: 0
;PCODE: $00000337 VOL: 0
;PCODE: $00000338 VOL: 0
; 0000 0233                     while (time < 125) #asm("wdr");  // задержка до 0.5 сек
;PCODE: $00000339 VOL: 0
;PCODE: $0000033A VOL: 0
;PCODE: $0000033B VOL: 0
;PCODE: $0000033C VOL: 0
;PCODE: $0000033D VOL: 0
	wdr
;PCODE: $0000033E VOL: 0
; 0000 0234                     break;
;PCODE: $0000033F VOL: 0
;PCODE: $00000340 VOL: 0
;PCODE: $00000341 VOL: 0
; 0000 0235                 case 15:
;PCODE: $00000342 VOL: 0
;PCODE: $00000343 VOL: 0
;PCODE: $00000344 VOL: 0
; 0000 0236                 case 47:
;PCODE: $00000345 VOL: 0
;PCODE: $00000346 VOL: 0
;PCODE: $00000347 VOL: 0
;PCODE: $00000348 VOL: 0
;PCODE: $00000349 VOL: 0
; 0000 0237                 case 63:
;PCODE: $0000034A VOL: 0
;PCODE: $0000034B VOL: 0
;PCODE: $0000034C VOL: 0
;PCODE: $0000034D VOL: 0
;PCODE: $0000034E VOL: 0
; 0000 0238                 case 79:
;PCODE: $0000034F VOL: 0
;PCODE: $00000350 VOL: 0
;PCODE: $00000351 VOL: 0
;PCODE: $00000352 VOL: 0
;PCODE: $00000353 VOL: 0
; 0000 0239                 case 95:
;PCODE: $00000354 VOL: 0
;PCODE: $00000355 VOL: 0
;PCODE: $00000356 VOL: 0
;PCODE: $00000357 VOL: 0
;PCODE: $00000358 VOL: 0
; 0000 023A                 case 111:
;PCODE: $00000359 VOL: 0
;PCODE: $0000035A VOL: 0
;PCODE: $0000035B VOL: 0
;PCODE: $0000035C VOL: 0
;PCODE: $0000035D VOL: 0
; 0000 023B                 case 127:
;PCODE: $0000035E VOL: 0
;PCODE: $0000035F VOL: 0
;PCODE: $00000360 VOL: 0
;PCODE: $00000361 VOL: 0
;PCODE: $00000362 VOL: 0
; 0000 023C                     sinc_err = 1;      // ошибка синхронизации
;PCODE: $00000363 VOL: 0
;PCODE: $00000364 VOL: 0
; 0000 023D                     zvuk = 1;
;PCODE: $00000365 VOL: 0
;PCODE: $00000366 VOL: 0
; 0000 023E                     break;
;PCODE: $00000367 VOL: 0
; 0000 023F                 default:
;PCODE: $00000368 VOL: 0
; 0000 0240                     if (sost[sig_bayt]&(1<<sig_bit))   // если под охраной
;PCODE: $00000369 VOL: 0
;PCODE: $0000036A VOL: 0
;PCODE: $0000036B VOL: 0
;PCODE: $0000036C VOL: 0
;PCODE: $0000036D VOL: 0
;PCODE: $0000036E VOL: 0
;PCODE: $0000036F VOL: 0
;PCODE: $00000370 VOL: 0
;PCODE: $00000371 VOL: 0
;PCODE: $00000372 VOL: 0
;PCODE: $00000373 VOL: 0
;PCODE: $00000374 VOL: 0
; 0000 0241                     {
; 0000 0242                         if ((esost[sig_bayt]&(1<<sig_bit) == 0))
;PCODE: $00000375 VOL: 0
;PCODE: $00000376 VOL: 0
;PCODE: $00000377 VOL: 0
;PCODE: $00000378 VOL: 0
;PCODE: $00000379 VOL: 0
;PCODE: $0000037A VOL: 0
;PCODE: $0000037B VOL: 0
;PCODE: $0000037C VOL: 0
;PCODE: $0000037D VOL: 0
;PCODE: $0000037E VOL: 0
;PCODE: $0000037F VOL: 0
;PCODE: $00000380 VOL: 0
; 0000 0243                         {
; 0000 0244                             //если не был под охр. поставить под охрану.
; 0000 0245                             OCR2B=0x50; // выдача на шим
;PCODE: $00000381 VOL: 0
;PCODE: $00000382 VOL: 0
; 0000 0246                             vyh_plus = 1;
;PCODE: $00000383 VOL: 0
;PCODE: $00000384 VOL: 0
; 0000 0247                             vyh_t0 = 0;            // переключить а вход
;PCODE: $00000385 VOL: 0
;PCODE: $00000386 VOL: 0
; 0000 0248                             n = 0;
;PCODE: $00000387 VOL: 0
; 0000 0249                             while(flag435)
;PCODE: $00000388 VOL: 0
;PCODE: $00000389 VOL: 0
;PCODE: $0000038A VOL: 0
;PCODE: $0000038B VOL: 0
; 0000 024A                             {
; 0000 024B                                 flag435 = 0;
;PCODE: $0000038C VOL: 0
;PCODE: $0000038D VOL: 0
; 0000 024C                                 ACSR |= (1<<ACIE); // включить перывания от компарат
;PCODE: $0000038E VOL: 0
;PCODE: $0000038F VOL: 0
;PCODE: $00000390 VOL: 0
; 0000 024D                                 time = 0;
;PCODE: $00000391 VOL: 0
;PCODE: $00000392 VOL: 0
; 0000 024E                                 while (time < 9) #asm("wdr");    // 25мСек + 12
;PCODE: $00000393 VOL: 0
;PCODE: $00000394 VOL: 0
;PCODE: $00000395 VOL: 0
;PCODE: $00000396 VOL: 0
;PCODE: $00000397 VOL: 0
	wdr
;PCODE: $00000398 VOL: 0
; 0000 024F                                 ACSR &= ~(1<<ACIE); // выкл прер компар
;PCODE: $00000399 VOL: 0
;PCODE: $0000039A VOL: 0
;PCODE: $0000039B VOL: 0
;PCODE: $0000039C VOL: 0
;PCODE: $0000039D VOL: 0
; 0000 0250 
; 0000 0251                                 //Ждем прекращения сигнала
; 0000 0252                                 if (++n > 250) flag435 = 0;
;PCODE: $0000039E VOL: 0
;PCODE: $0000039F VOL: 0
;PCODE: $000003A0 VOL: 0
;PCODE: $000003A1 VOL: 0
;PCODE: $000003A2 VOL: 0
;PCODE: $000003A3 VOL: 0
; 0000 0253                             }
;PCODE: $000003A4 VOL: 0
;PCODE: $000003A5 VOL: 0
;PCODE: $000003A6 VOL: 0
; 0000 0254                             vyh_t0 = 1;            // переключить Hа вyход
;PCODE: $000003A7 VOL: 0
;PCODE: $000003A8 VOL: 0
; 0000 0255 
; 0000 0256                             if(n < 251)
;PCODE: $000003A9 VOL: 0
;PCODE: $000003AA VOL: 0
;PCODE: $000003AB VOL: 0
; 0000 0257                             {
; 0000 0258                                 esost[sig_bayt] |= (1<<sig_bit);      // включаем охрану если сигнал прервался
;PCODE: $000003AC VOL: 0
;PCODE: $000003AD VOL: 0
;PCODE: $000003AE VOL: 0
;PCODE: $000003AF VOL: 0
;PCODE: $000003B0 VOL: 0
;PCODE: $000003B1 VOL: 0
;PCODE: $000003B2 VOL: 0
;PCODE: $000003B3 VOL: 0
;PCODE: $000003B4 VOL: 0
;PCODE: $000003B5 VOL: 0
;PCODE: $000003B6 VOL: 0
;PCODE: $000003B7 VOL: 0
;PCODE: $000003B8 VOL: 0
; 0000 0259                                 twi_tx_buffer[sig_bayt] = esost[sig_bayt]; // передача состояния
;PCODE: $000003B9 VOL: 0
;PCODE: $000003BA VOL: 0
;PCODE: $000003BB VOL: 0
;PCODE: $000003BC VOL: 0
;PCODE: $000003BD VOL: 0
;PCODE: $000003BE VOL: 0
;PCODE: $000003BF VOL: 0
;PCODE: $000003C0 VOL: 0
;PCODE: $000003C1 VOL: 0
;PCODE: $000003C2 VOL: 0
; 0000 025A                             }
; 0000 025B                             else sost[sig_bayt] &= ~(3<<sig_bit);    // если не взялась, - снять
;PCODE: $000003C3 VOL: 0
;PCODE: $000003C4 VOL: 0
;PCODE: $000003C5 VOL: 0
;PCODE: $000003C6 VOL: 0
;PCODE: $000003C7 VOL: 0
;PCODE: $000003C8 VOL: 0
;PCODE: $000003C9 VOL: 0
;PCODE: $000003CA VOL: 0
;PCODE: $000003CB VOL: 0
;PCODE: $000003CC VOL: 0
;PCODE: $000003CD VOL: 0
;PCODE: $000003CE VOL: 0
;PCODE: $000003CF VOL: 0
;PCODE: $000003D0 VOL: 0
; 0000 025C                         }
;PCODE: $000003D1 VOL: 0
; 0000 025D                         else
;PCODE: $000003D2 VOL: 0
;PCODE: $000003D3 VOL: 0
; 0000 025E                         {
; 0000 025F                         // если объекм был по охраной тревога
; 0000 0260                             sost[sig_bayt] |= (1<<(sig_bit+1));
;PCODE: $000003D4 VOL: 0
;PCODE: $000003D5 VOL: 0
;PCODE: $000003D6 VOL: 0
;PCODE: $000003D7 VOL: 0
;PCODE: $000003D8 VOL: 0
;PCODE: $000003D9 VOL: 0
;PCODE: $000003DA VOL: 0
;PCODE: $000003DB VOL: 0
;PCODE: $000003DC VOL: 0
;PCODE: $000003DD VOL: 0
;PCODE: $000003DE VOL: 0
;PCODE: $000003DF VOL: 0
; 0000 0261                             esost[sig_bayt] |= (1<<(sig_bit+1));
;PCODE: $000003E0 VOL: 0
;PCODE: $000003E1 VOL: 0
;PCODE: $000003E2 VOL: 0
;PCODE: $000003E3 VOL: 0
;PCODE: $000003E4 VOL: 0
;PCODE: $000003E5 VOL: 0
;PCODE: $000003E6 VOL: 0
;PCODE: $000003E7 VOL: 0
;PCODE: $000003E8 VOL: 0
;PCODE: $000003E9 VOL: 0
;PCODE: $000003EA VOL: 0
;PCODE: $000003EB VOL: 0
;PCODE: $000003EC VOL: 0
;PCODE: $000003ED VOL: 0
; 0000 0262                             twi_tx_buffer[sig_bayt] = esost[sig_bayt]; // передача состояния
;PCODE: $000003EE VOL: 0
;PCODE: $000003EF VOL: 0
;PCODE: $000003F0 VOL: 0
;PCODE: $000003F1 VOL: 0
;PCODE: $000003F2 VOL: 0
;PCODE: $000003F3 VOL: 0
;PCODE: $000003F4 VOL: 0
;PCODE: $000003F5 VOL: 0
;PCODE: $000003F6 VOL: 0
;PCODE: $000003F7 VOL: 0
; 0000 0263                             trevoga = 1;
;PCODE: $000003F8 VOL: 0
;PCODE: $000003F9 VOL: 0
; 0000 0264                             zvuk = 1;
;PCODE: $000003FA VOL: 0
;PCODE: $000003FB VOL: 0
; 0000 0265                         }
;PCODE: $000003FC VOL: 0
; 0000 0266                         while(time<375) #asm("wdr");
;PCODE: $000003FD VOL: 0
;PCODE: $000003FE VOL: 0
;PCODE: $000003FF VOL: 0
;PCODE: $00000400 VOL: 0
;PCODE: $00000401 VOL: 0
	wdr
;PCODE: $00000402 VOL: 0
; 0000 0267                         vyh_plus = 0;
;PCODE: $00000403 VOL: 0
;PCODE: $00000404 VOL: 0
;PCODE: $00000405 VOL: 0
;PCODE: $00000406 VOL: 0
; 0000 0268                         OCR2B=0xFF;
;PCODE: $00000407 VOL: 0
;PCODE: $00000408 VOL: 0
; 0000 0269                     }
; 0000 026A                     else  if (esost[sig_bayt]&(1<<sig_bit))  // не под охр, но был
;PCODE: $00000409 VOL: 0
;PCODE: $0000040A VOL: 0
;PCODE: $0000040B VOL: 0
;PCODE: $0000040C VOL: 0
;PCODE: $0000040D VOL: 0
;PCODE: $0000040E VOL: 0
;PCODE: $0000040F VOL: 0
;PCODE: $00000410 VOL: 0
;PCODE: $00000411 VOL: 0
;PCODE: $00000412 VOL: 0
;PCODE: $00000413 VOL: 0
;PCODE: $00000414 VOL: 0
;PCODE: $00000415 VOL: 0
;PCODE: $00000416 VOL: 0
;PCODE: $00000417 VOL: 0
; 0000 026B                     {
; 0000 026C 
; 0000 026D                         esost[sig_bayt] &= ~(3<<sig_bit);      //  если был под охр. снять с охр.
;PCODE: $00000418 VOL: 0
;PCODE: $00000419 VOL: 0
;PCODE: $0000041A VOL: 0
;PCODE: $0000041B VOL: 0
;PCODE: $0000041C VOL: 0
;PCODE: $0000041D VOL: 0
;PCODE: $0000041E VOL: 0
;PCODE: $0000041F VOL: 0
;PCODE: $00000420 VOL: 0
;PCODE: $00000421 VOL: 0
;PCODE: $00000422 VOL: 0
;PCODE: $00000423 VOL: 0
;PCODE: $00000424 VOL: 0
;PCODE: $00000425 VOL: 0
; 0000 026E 
; 0000 026F                         twi_tx_buffer[sig_bayt] = esost[sig_bayt]; // передача состояния
;PCODE: $00000426 VOL: 0
;PCODE: $00000427 VOL: 0
;PCODE: $00000428 VOL: 0
;PCODE: $00000429 VOL: 0
;PCODE: $0000042A VOL: 0
;PCODE: $0000042B VOL: 0
;PCODE: $0000042C VOL: 0
;PCODE: $0000042D VOL: 0
;PCODE: $0000042E VOL: 0
;PCODE: $0000042F VOL: 0
; 0000 0270 
; 0000 0271                     }
; 0000 0272 
; 0000 0273             }
;PCODE: $00000430 VOL: 0
;PCODE: $00000431 VOL: 0
;PCODE: $00000432 VOL: 0
; 0000 0274           }
; 0000 0275           else      // если не было ответа
;PCODE: $00000433 VOL: 0
;PCODE: $00000434 VOL: 0
; 0000 0276           {
; 0000 0277             switch (i)
;PCODE: $00000435 VOL: 0
;PCODE: $00000436 VOL: 0
; 0000 0278             {
; 0000 0279                 case 31:
;PCODE: $00000437 VOL: 0
;PCODE: $00000438 VOL: 0
; 0000 027A                     // вкл питание
; 0000 027B 
; 0000 027C                     if (!fix)
;PCODE: $00000439 VOL: 0
;PCODE: $0000043A VOL: 0
;PCODE: $0000043B VOL: 0
; 0000 027D                     {
; 0000 027E                         clear_lcd();
;PCODE: $0000043C VOL: 0
; 0000 027F                         lcd_gotoxy(0,1);
;PCODE: $0000043D VOL: 0
;PCODE: $0000043E VOL: 0
;PCODE: $0000043F VOL: 0
;PCODE: $00000440 VOL: 0
; 0000 0280                         lcd_putsf("Error Pitanie!!!");
;PCODE: $00000441 VOL: 0
;PCODE: $00000442 VOL: 0
;PCODE: $00000443 VOL: 0
; 0000 0281                     }
; 0000 0282 
; 0000 0283                     pit_err = 1;
;PCODE: $00000444 VOL: 0
;PCODE: $00000445 VOL: 0
;PCODE: $00000446 VOL: 0
; 0000 0284                     pit_ok = 0;
;PCODE: $00000447 VOL: 0
;PCODE: $00000448 VOL: 0
; 0000 0285                     break;
;PCODE: $00000449 VOL: 0
; 0000 0286                 case 63:
;PCODE: $0000044A VOL: 0
;PCODE: $0000044B VOL: 0
;PCODE: $0000044C VOL: 0
; 0000 0287                     // вывод второй половины на дисп
; 0000 0288                     if (!fix)
;PCODE: $0000044D VOL: 0
;PCODE: $0000044E VOL: 0
;PCODE: $0000044F VOL: 0
; 0000 0289                     {
; 0000 028A                         clear_lcd();
;PCODE: $00000450 VOL: 0
; 0000 028B                         lcd_gotoxy(0,0);
;PCODE: $00000451 VOL: 0
;PCODE: $00000452 VOL: 0
;PCODE: $00000453 VOL: 0
;PCODE: $00000454 VOL: 0
; 0000 028C                         lcd_putsf("31  ");
;PCODE: $00000455 VOL: 0
;PCODE: $00000456 VOL: 0
;PCODE: $00000457 VOL: 0
; 0000 028D                         n = 1;
;PCODE: $00000458 VOL: 0
;PCODE: $00000459 VOL: 0
; 0000 028E                         for (sig_bayt = 8; sig_bayt < 16 ; sig_bayt++)
;PCODE: $0000045A VOL: 0
;PCODE: $0000045B VOL: 0
;PCODE: $0000045C VOL: 0
;PCODE: $0000045D VOL: 0
;PCODE: $0000045E VOL: 0
;PCODE: $0000045F VOL: 0
;PCODE: $00000460 VOL: 0
;PCODE: $00000461 VOL: 0
;PCODE: $00000462 VOL: 0
;PCODE: $00000463 VOL: 0
; 0000 028F                         {
; 0000 0290                             for(sig_bit = 0; (sig_bayt == 11 || sig_bayt == 15)? sig_bit < 6: sig_bit < 8; sig_bit += 2)
;PCODE: $00000464 VOL: 0
;PCODE: $00000465 VOL: 0
;PCODE: $00000466 VOL: 0
;PCODE: $00000467 VOL: 0
;PCODE: $00000468 VOL: 0
;PCODE: $00000469 VOL: 0
;PCODE: $0000046A VOL: 0
;PCODE: $0000046B VOL: 0
;PCODE: $0000046C VOL: 0
;PCODE: $0000046D VOL: 0
;PCODE: $0000046E VOL: 0
;PCODE: $0000046F VOL: 0
;PCODE: $00000470 VOL: 0
;PCODE: $00000471 VOL: 0
;PCODE: $00000472 VOL: 0
;PCODE: $00000473 VOL: 0
;PCODE: $00000474 VOL: 0
;PCODE: $00000475 VOL: 0
;PCODE: $00000476 VOL: 0
;PCODE: $00000477 VOL: 0
;PCODE: $00000478 VOL: 0
;PCODE: $00000479 VOL: 0
;PCODE: $0000047A VOL: 0
;PCODE: $0000047B VOL: 0
;PCODE: $0000047C VOL: 0
;PCODE: $0000047D VOL: 0
;PCODE: $0000047E VOL: 0
; 0000 0291                             {
; 0000 0292                                 if(++n>10) n = 1;
;PCODE: $0000047F VOL: 0
;PCODE: $00000480 VOL: 0
;PCODE: $00000481 VOL: 0
;PCODE: $00000482 VOL: 0
;PCODE: $00000483 VOL: 0
;PCODE: $00000484 VOL: 0
; 0000 0293                                 lcd_putchar(47+n);
;PCODE: $00000485 VOL: 0
;PCODE: $00000486 VOL: 0
;PCODE: $00000487 VOL: 0
;PCODE: $00000488 VOL: 0
; 0000 0294                                 if((sost[sig_bayt]&(1<<sig_bit)))
;PCODE: $00000489 VOL: 0
;PCODE: $0000048A VOL: 0
;PCODE: $0000048B VOL: 0
;PCODE: $0000048C VOL: 0
;PCODE: $0000048D VOL: 0
;PCODE: $0000048E VOL: 0
;PCODE: $0000048F VOL: 0
;PCODE: $00000490 VOL: 0
;PCODE: $00000491 VOL: 0
;PCODE: $00000492 VOL: 0
;PCODE: $00000493 VOL: 0
;PCODE: $00000494 VOL: 0
; 0000 0295                                 {
; 0000 0296                                      if((sost[sig_bayt]&(1<<(sig_bit+1)))) lcd_putchar(255);
;PCODE: $00000495 VOL: 0
;PCODE: $00000496 VOL: 0
;PCODE: $00000497 VOL: 0
;PCODE: $00000498 VOL: 0
;PCODE: $00000499 VOL: 0
;PCODE: $0000049A VOL: 0
;PCODE: $0000049B VOL: 0
;PCODE: $0000049C VOL: 0
;PCODE: $0000049D VOL: 0
;PCODE: $0000049E VOL: 0
;PCODE: $0000049F VOL: 0
;PCODE: $000004A0 VOL: 0
;PCODE: $000004A1 VOL: 0
;PCODE: $000004A2 VOL: 0
;PCODE: $000004A3 VOL: 0
;PCODE: $000004A4 VOL: 0
; 0000 0297                                      else  lcd_putchar('.');
;PCODE: $000004A5 VOL: 0
;PCODE: $000004A6 VOL: 0
;PCODE: $000004A7 VOL: 0
;PCODE: $000004A8 VOL: 0
; 0000 0298                                 } else lcd_putchar(' ');
;PCODE: $000004A9 VOL: 0
;PCODE: $000004AA VOL: 0
;PCODE: $000004AB VOL: 0
;PCODE: $000004AC VOL: 0
;PCODE: $000004AD VOL: 0
; 0000 0299                             }
;PCODE: $000004AE VOL: 0
;PCODE: $000004AF VOL: 0
;PCODE: $000004B0 VOL: 0
;PCODE: $000004B1 VOL: 0
;PCODE: $000004B2 VOL: 0
;PCODE: $000004B3 VOL: 0
;PCODE: $000004B4 VOL: 0
; 0000 029A                         }
;PCODE: $000004B5 VOL: 0
;PCODE: $000004B6 VOL: 0
;PCODE: $000004B7 VOL: 0
;PCODE: $000004B8 VOL: 0
;PCODE: $000004B9 VOL: 0
;PCODE: $000004BA VOL: 0
; 0000 029B                     }
; 0000 029C 
; 0000 029D                     break;
;PCODE: $000004BB VOL: 0
;PCODE: $000004BC VOL: 0
; 0000 029E                 case 95:
;PCODE: $000004BD VOL: 0
;PCODE: $000004BE VOL: 0
;PCODE: $000004BF VOL: 0
; 0000 029F                     // вывод третьей половины на дисп
; 0000 02A0                     if (!fix)
;PCODE: $000004C0 VOL: 0
;PCODE: $000004C1 VOL: 0
;PCODE: $000004C2 VOL: 0
; 0000 02A1                     {
; 0000 02A2                         clear_lcd();
;PCODE: $000004C3 VOL: 0
; 0000 02A3                         lcd_gotoxy(0,0);
;PCODE: $000004C4 VOL: 0
;PCODE: $000004C5 VOL: 0
;PCODE: $000004C6 VOL: 0
;PCODE: $000004C7 VOL: 0
; 0000 02A4                         lcd_putsf("61  ");
;PCODE: $000004C8 VOL: 0
;PCODE: $000004C9 VOL: 0
;PCODE: $000004CA VOL: 0
; 0000 02A5                         n = 1;
;PCODE: $000004CB VOL: 0
;PCODE: $000004CC VOL: 0
; 0000 02A6                         for (sig_bayt = 16; sig_bayt < 24 ; sig_bayt++)
;PCODE: $000004CD VOL: 0
;PCODE: $000004CE VOL: 0
;PCODE: $000004CF VOL: 0
;PCODE: $000004D0 VOL: 0
;PCODE: $000004D1 VOL: 0
;PCODE: $000004D2 VOL: 0
;PCODE: $000004D3 VOL: 0
;PCODE: $000004D4 VOL: 0
;PCODE: $000004D5 VOL: 0
;PCODE: $000004D6 VOL: 0
; 0000 02A7                         {
; 0000 02A8                             for(sig_bit = 0; (sig_bayt == 19 || sig_bayt == 23)? sig_bit < 6: sig_bit < 8; sig_bit += 2)
;PCODE: $000004D7 VOL: 0
;PCODE: $000004D8 VOL: 0
;PCODE: $000004D9 VOL: 0
;PCODE: $000004DA VOL: 0
;PCODE: $000004DB VOL: 0
;PCODE: $000004DC VOL: 0
;PCODE: $000004DD VOL: 0
;PCODE: $000004DE VOL: 0
;PCODE: $000004DF VOL: 0
;PCODE: $000004E0 VOL: 0
;PCODE: $000004E1 VOL: 0
;PCODE: $000004E2 VOL: 0
;PCODE: $000004E3 VOL: 0
;PCODE: $000004E4 VOL: 0
;PCODE: $000004E5 VOL: 0
;PCODE: $000004E6 VOL: 0
;PCODE: $000004E7 VOL: 0
;PCODE: $000004E8 VOL: 0
;PCODE: $000004E9 VOL: 0
;PCODE: $000004EA VOL: 0
;PCODE: $000004EB VOL: 0
;PCODE: $000004EC VOL: 0
;PCODE: $000004ED VOL: 0
;PCODE: $000004EE VOL: 0
;PCODE: $000004EF VOL: 0
;PCODE: $000004F0 VOL: 0
;PCODE: $000004F1 VOL: 0
; 0000 02A9                             {
; 0000 02AA                                 if(++n>10) n = 1;
;PCODE: $000004F2 VOL: 0
;PCODE: $000004F3 VOL: 0
;PCODE: $000004F4 VOL: 0
;PCODE: $000004F5 VOL: 0
;PCODE: $000004F6 VOL: 0
;PCODE: $000004F7 VOL: 0
; 0000 02AB                                 lcd_putchar(47+n);
;PCODE: $000004F8 VOL: 0
;PCODE: $000004F9 VOL: 0
;PCODE: $000004FA VOL: 0
;PCODE: $000004FB VOL: 0
; 0000 02AC                                 if((sost[sig_bayt]&(1<<sig_bit)))
;PCODE: $000004FC VOL: 0
;PCODE: $000004FD VOL: 0
;PCODE: $000004FE VOL: 0
;PCODE: $000004FF VOL: 0
;PCODE: $00000500 VOL: 0
;PCODE: $00000501 VOL: 0
;PCODE: $00000502 VOL: 0
;PCODE: $00000503 VOL: 0
;PCODE: $00000504 VOL: 0
;PCODE: $00000505 VOL: 0
;PCODE: $00000506 VOL: 0
;PCODE: $00000507 VOL: 0
; 0000 02AD                                 {
; 0000 02AE                                      if((sost[sig_bayt]&(1<<(sig_bit+1)))) lcd_putchar(255);
;PCODE: $00000508 VOL: 0
;PCODE: $00000509 VOL: 0
;PCODE: $0000050A VOL: 0
;PCODE: $0000050B VOL: 0
;PCODE: $0000050C VOL: 0
;PCODE: $0000050D VOL: 0
;PCODE: $0000050E VOL: 0
;PCODE: $0000050F VOL: 0
;PCODE: $00000510 VOL: 0
;PCODE: $00000511 VOL: 0
;PCODE: $00000512 VOL: 0
;PCODE: $00000513 VOL: 0
;PCODE: $00000514 VOL: 0
;PCODE: $00000515 VOL: 0
;PCODE: $00000516 VOL: 0
;PCODE: $00000517 VOL: 0
; 0000 02AF                                      else  lcd_putchar('.');
;PCODE: $00000518 VOL: 0
;PCODE: $00000519 VOL: 0
;PCODE: $0000051A VOL: 0
;PCODE: $0000051B VOL: 0
; 0000 02B0                                 } else lcd_putchar(' ');
;PCODE: $0000051C VOL: 0
;PCODE: $0000051D VOL: 0
;PCODE: $0000051E VOL: 0
;PCODE: $0000051F VOL: 0
;PCODE: $00000520 VOL: 0
; 0000 02B1                             }
;PCODE: $00000521 VOL: 0
;PCODE: $00000522 VOL: 0
;PCODE: $00000523 VOL: 0
;PCODE: $00000524 VOL: 0
;PCODE: $00000525 VOL: 0
;PCODE: $00000526 VOL: 0
;PCODE: $00000527 VOL: 0
; 0000 02B2                         }
;PCODE: $00000528 VOL: 0
;PCODE: $00000529 VOL: 0
;PCODE: $0000052A VOL: 0
;PCODE: $0000052B VOL: 0
;PCODE: $0000052C VOL: 0
;PCODE: $0000052D VOL: 0
; 0000 02B3                     }
; 0000 02B4                     break;
;PCODE: $0000052E VOL: 0
;PCODE: $0000052F VOL: 0
; 0000 02B5                 case 127:
;PCODE: $00000530 VOL: 0
;PCODE: $00000531 VOL: 0
;PCODE: $00000532 VOL: 0
; 0000 02B6                     // вывод четвертой половины на дисп
; 0000 02B7                     if (!fix)
;PCODE: $00000533 VOL: 0
;PCODE: $00000534 VOL: 0
;PCODE: $00000535 VOL: 0
; 0000 02B8                     {
; 0000 02B9                         clear_lcd();
;PCODE: $00000536 VOL: 0
; 0000 02BA                         lcd_gotoxy(0,0);
;PCODE: $00000537 VOL: 0
;PCODE: $00000538 VOL: 0
;PCODE: $00000539 VOL: 0
;PCODE: $0000053A VOL: 0
; 0000 02BB                         lcd_putsf("91  ");
;PCODE: $0000053B VOL: 0
;PCODE: $0000053C VOL: 0
;PCODE: $0000053D VOL: 0
; 0000 02BC                         n = 1;
;PCODE: $0000053E VOL: 0
;PCODE: $0000053F VOL: 0
; 0000 02BD                         for (sig_bayt = 24; sig_bayt < 32; sig_bayt++)
;PCODE: $00000540 VOL: 0
;PCODE: $00000541 VOL: 0
;PCODE: $00000542 VOL: 0
;PCODE: $00000543 VOL: 0
;PCODE: $00000544 VOL: 0
;PCODE: $00000545 VOL: 0
;PCODE: $00000546 VOL: 0
;PCODE: $00000547 VOL: 0
;PCODE: $00000548 VOL: 0
;PCODE: $00000549 VOL: 0
; 0000 02BE                         {
; 0000 02BF                             for(sig_bit = 0; (sig_bayt == 27 || sig_bayt == 31)? sig_bit < 6: sig_bit < 8; sig_bit += 2)
;PCODE: $0000054A VOL: 0
;PCODE: $0000054B VOL: 0
;PCODE: $0000054C VOL: 0
;PCODE: $0000054D VOL: 0
;PCODE: $0000054E VOL: 0
;PCODE: $0000054F VOL: 0
;PCODE: $00000550 VOL: 0
;PCODE: $00000551 VOL: 0
;PCODE: $00000552 VOL: 0
;PCODE: $00000553 VOL: 0
;PCODE: $00000554 VOL: 0
;PCODE: $00000555 VOL: 0
;PCODE: $00000556 VOL: 0
;PCODE: $00000557 VOL: 0
;PCODE: $00000558 VOL: 0
;PCODE: $00000559 VOL: 0
;PCODE: $0000055A VOL: 0
;PCODE: $0000055B VOL: 0
;PCODE: $0000055C VOL: 0
;PCODE: $0000055D VOL: 0
;PCODE: $0000055E VOL: 0
;PCODE: $0000055F VOL: 0
;PCODE: $00000560 VOL: 0
;PCODE: $00000561 VOL: 0
;PCODE: $00000562 VOL: 0
;PCODE: $00000563 VOL: 0
;PCODE: $00000564 VOL: 0
; 0000 02C0                             {
; 0000 02C1                                 if(++n>10) n = 1;
;PCODE: $00000565 VOL: 0
;PCODE: $00000566 VOL: 0
;PCODE: $00000567 VOL: 0
;PCODE: $00000568 VOL: 0
;PCODE: $00000569 VOL: 0
;PCODE: $0000056A VOL: 0
; 0000 02C2                                 lcd_putchar(47+n);
;PCODE: $0000056B VOL: 0
;PCODE: $0000056C VOL: 0
;PCODE: $0000056D VOL: 0
;PCODE: $0000056E VOL: 0
; 0000 02C3                                 if((sost[sig_bayt]&(1<<sig_bit)))
;PCODE: $0000056F VOL: 0
;PCODE: $00000570 VOL: 0
;PCODE: $00000571 VOL: 0
;PCODE: $00000572 VOL: 0
;PCODE: $00000573 VOL: 0
;PCODE: $00000574 VOL: 0
;PCODE: $00000575 VOL: 0
;PCODE: $00000576 VOL: 0
;PCODE: $00000577 VOL: 0
;PCODE: $00000578 VOL: 0
;PCODE: $00000579 VOL: 0
;PCODE: $0000057A VOL: 0
; 0000 02C4                                 {
; 0000 02C5                                      if((sost[sig_bayt]&(1<<(sig_bit+1)))) lcd_putchar(255);
;PCODE: $0000057B VOL: 0
;PCODE: $0000057C VOL: 0
;PCODE: $0000057D VOL: 0
;PCODE: $0000057E VOL: 0
;PCODE: $0000057F VOL: 0
;PCODE: $00000580 VOL: 0
;PCODE: $00000581 VOL: 0
;PCODE: $00000582 VOL: 0
;PCODE: $00000583 VOL: 0
;PCODE: $00000584 VOL: 0
;PCODE: $00000585 VOL: 0
;PCODE: $00000586 VOL: 0
;PCODE: $00000587 VOL: 0
;PCODE: $00000588 VOL: 0
;PCODE: $00000589 VOL: 0
;PCODE: $0000058A VOL: 0
; 0000 02C6                                      else  lcd_putchar('.');
;PCODE: $0000058B VOL: 0
;PCODE: $0000058C VOL: 0
;PCODE: $0000058D VOL: 0
;PCODE: $0000058E VOL: 0
; 0000 02C7                                 } else lcd_putchar(' ');
;PCODE: $0000058F VOL: 0
;PCODE: $00000590 VOL: 0
;PCODE: $00000591 VOL: 0
;PCODE: $00000592 VOL: 0
;PCODE: $00000593 VOL: 0
; 0000 02C8                             }
;PCODE: $00000594 VOL: 0
;PCODE: $00000595 VOL: 0
;PCODE: $00000596 VOL: 0
;PCODE: $00000597 VOL: 0
;PCODE: $00000598 VOL: 0
;PCODE: $00000599 VOL: 0
;PCODE: $0000059A VOL: 0
; 0000 02C9                         }
;PCODE: $0000059B VOL: 0
;PCODE: $0000059C VOL: 0
;PCODE: $0000059D VOL: 0
;PCODE: $0000059E VOL: 0
;PCODE: $0000059F VOL: 0
;PCODE: $000005A0 VOL: 0
; 0000 02CA                     }
; 0000 02CB                     break;
;PCODE: $000005A1 VOL: 0
;PCODE: $000005A2 VOL: 0
; 0000 02CC                 case 15:
;PCODE: $000005A3 VOL: 0
;PCODE: $000005A4 VOL: 0
;PCODE: $000005A5 VOL: 0
; 0000 02CD                 case 47:
;PCODE: $000005A6 VOL: 0
;PCODE: $000005A7 VOL: 0
;PCODE: $000005A8 VOL: 0
;PCODE: $000005A9 VOL: 0
;PCODE: $000005AA VOL: 0
; 0000 02CE                 case 79:
;PCODE: $000005AB VOL: 0
;PCODE: $000005AC VOL: 0
;PCODE: $000005AD VOL: 0
;PCODE: $000005AE VOL: 0
;PCODE: $000005AF VOL: 0
; 0000 02CF                 case 111:
;PCODE: $000005B0 VOL: 0
;PCODE: $000005B1 VOL: 0
;PCODE: $000005B2 VOL: 0
;PCODE: $000005B3 VOL: 0
;PCODE: $000005B4 VOL: 0
; 0000 02D0                     break;
;PCODE: $000005B5 VOL: 0
; 0000 02D1                 default:
;PCODE: $000005B6 VOL: 0
; 0000 02D2                     if ((sost[sig_bayt]&(1<<sig_bit)) == 0)
;PCODE: $000005B7 VOL: 0
;PCODE: $000005B8 VOL: 0
;PCODE: $000005B9 VOL: 0
;PCODE: $000005BA VOL: 0
;PCODE: $000005BB VOL: 0
;PCODE: $000005BC VOL: 0
;PCODE: $000005BD VOL: 0
;PCODE: $000005BE VOL: 0
;PCODE: $000005BF VOL: 0
;PCODE: $000005C0 VOL: 0
;PCODE: $000005C1 VOL: 0
;PCODE: $000005C2 VOL: 0
; 0000 02D3                     {
; 0000 02D4                         if (esost[sig_bayt]&(1<<sig_bit))  // не под охр, но был
;PCODE: $000005C3 VOL: 0
;PCODE: $000005C4 VOL: 0
;PCODE: $000005C5 VOL: 0
;PCODE: $000005C6 VOL: 0
;PCODE: $000005C7 VOL: 0
;PCODE: $000005C8 VOL: 0
;PCODE: $000005C9 VOL: 0
;PCODE: $000005CA VOL: 0
;PCODE: $000005CB VOL: 0
;PCODE: $000005CC VOL: 0
;PCODE: $000005CD VOL: 0
;PCODE: $000005CE VOL: 0
;PCODE: $000005CF VOL: 0
; 0000 02D5                         {
; 0000 02D6                             //если был под охр. снять с охр.
; 0000 02D7                             esost[sig_bayt] &= ~(3<<sig_bit);      //  снять с охр.
;PCODE: $000005D0 VOL: 0
;PCODE: $000005D1 VOL: 0
;PCODE: $000005D2 VOL: 0
;PCODE: $000005D3 VOL: 0
;PCODE: $000005D4 VOL: 0
;PCODE: $000005D5 VOL: 0
;PCODE: $000005D6 VOL: 0
;PCODE: $000005D7 VOL: 0
;PCODE: $000005D8 VOL: 0
;PCODE: $000005D9 VOL: 0
;PCODE: $000005DA VOL: 0
;PCODE: $000005DB VOL: 0
;PCODE: $000005DC VOL: 0
;PCODE: $000005DD VOL: 0
; 0000 02D8                             twi_tx_buffer[sig_bayt] = esost[sig_bayt]; // передача состояния
;PCODE: $000005DE VOL: 0
;PCODE: $000005DF VOL: 0
;PCODE: $000005E0 VOL: 0
;PCODE: $000005E1 VOL: 0
;PCODE: $000005E2 VOL: 0
;PCODE: $000005E3 VOL: 0
;PCODE: $000005E4 VOL: 0
;PCODE: $000005E5 VOL: 0
;PCODE: $000005E6 VOL: 0
;PCODE: $000005E7 VOL: 0
; 0000 02D9                         }
; 0000 02DA                     }
;PCODE: $000005E8 VOL: 0
; 0000 02DB                     else  if ((esost[sig_bayt]&(1<<sig_bit)) == 0) //если под охраной, но не был
;PCODE: $000005E9 VOL: 0
;PCODE: $000005EA VOL: 0
;PCODE: $000005EB VOL: 0
;PCODE: $000005EC VOL: 0
;PCODE: $000005ED VOL: 0
;PCODE: $000005EE VOL: 0
;PCODE: $000005EF VOL: 0
;PCODE: $000005F0 VOL: 0
;PCODE: $000005F1 VOL: 0
;PCODE: $000005F2 VOL: 0
;PCODE: $000005F3 VOL: 0
;PCODE: $000005F4 VOL: 0
;PCODE: $000005F5 VOL: 0
;PCODE: $000005F6 VOL: 0
;PCODE: $000005F7 VOL: 0
; 0000 02DC                     {
; 0000 02DD                         esost[sig_bayt] |= (1<<sig_bit);   // включаем охрану
;PCODE: $000005F8 VOL: 0
;PCODE: $000005F9 VOL: 0
;PCODE: $000005FA VOL: 0
;PCODE: $000005FB VOL: 0
;PCODE: $000005FC VOL: 0
;PCODE: $000005FD VOL: 0
;PCODE: $000005FE VOL: 0
;PCODE: $000005FF VOL: 0
;PCODE: $00000600 VOL: 0
;PCODE: $00000601 VOL: 0
;PCODE: $00000602 VOL: 0
;PCODE: $00000603 VOL: 0
;PCODE: $00000604 VOL: 0
; 0000 02DE                         twi_tx_buffer[sig_bayt] = esost[sig_bayt]; // передача состояния
;PCODE: $00000605 VOL: 0
;PCODE: $00000606 VOL: 0
;PCODE: $00000607 VOL: 0
;PCODE: $00000608 VOL: 0
;PCODE: $00000609 VOL: 0
;PCODE: $0000060A VOL: 0
;PCODE: $0000060B VOL: 0
;PCODE: $0000060C VOL: 0
;PCODE: $0000060D VOL: 0
;PCODE: $0000060E VOL: 0
; 0000 02DF                     }
; 0000 02E0             }
;PCODE: $0000060F VOL: 0
;PCODE: $00000610 VOL: 0
;PCODE: $00000611 VOL: 0
; 0000 02E1           }
;PCODE: $00000612 VOL: 0
; 0000 02E2           flag435 = 0;
;PCODE: $00000613 VOL: 0
;PCODE: $00000614 VOL: 0
; 0000 02E3           if (pit_ok)
;PCODE: $00000615 VOL: 0
;PCODE: $00000616 VOL: 0
;PCODE: $00000617 VOL: 0
; 0000 02E4           {
; 0000 02E5             while (time < 125) #asm("wdr");
;PCODE: $00000618 VOL: 0
;PCODE: $00000619 VOL: 0
;PCODE: $0000061A VOL: 0
;PCODE: $0000061B VOL: 0
;PCODE: $0000061C VOL: 0
	wdr
;PCODE: $0000061D VOL: 0
; 0000 02E6             pit_ok = 0;
;PCODE: $0000061E VOL: 0
;PCODE: $0000061F VOL: 0
;PCODE: $00000620 VOL: 0
;PCODE: $00000621 VOL: 0
; 0000 02E7           }
; 0000 02E8 
; 0000 02E9 //          if (trevoga) //while (time < 375);
; 0000 02EA //          trevoga = 0;
; 0000 02EB           if (sinc_err)
;PCODE: $00000622 VOL: 0
;PCODE: $00000623 VOL: 0
;PCODE: $00000624 VOL: 0
;PCODE: $00000625 VOL: 0
; 0000 02EC           {
; 0000 02ED             sinc_err = 0;
;PCODE: $00000626 VOL: 0
;PCODE: $00000627 VOL: 0
; 0000 02EE             if (!fix)
;PCODE: $00000628 VOL: 0
;PCODE: $00000629 VOL: 0
;PCODE: $0000062A VOL: 0
; 0000 02EF             {
; 0000 02F0                 clear_lcd();
;PCODE: $0000062B VOL: 0
; 0000 02F1                 lcd_gotoxy(0,1);
;PCODE: $0000062C VOL: 0
;PCODE: $0000062D VOL: 0
;PCODE: $0000062E VOL: 0
;PCODE: $0000062F VOL: 0
; 0000 02F2                 lcd_putsf("  Error Sync!!! ");
;PCODE: $00000630 VOL: 0
;PCODE: $00000631 VOL: 0
;PCODE: $00000632 VOL: 0
; 0000 02F3             } else
;PCODE: $00000633 VOL: 0
;PCODE: $00000634 VOL: 0
; 0000 02F4             {
; 0000 02F5                 lcd_gotoxy(3,0);
;PCODE: $00000635 VOL: 0
;PCODE: $00000636 VOL: 0
;PCODE: $00000637 VOL: 0
;PCODE: $00000638 VOL: 0
; 0000 02F6                 lcd_putchar('F');
;PCODE: $00000639 VOL: 0
;PCODE: $0000063A VOL: 0
; 0000 02F7             }
;PCODE: $0000063B VOL: 0
; 0000 02F8             break;
;PCODE: $0000063C VOL: 0
; 0000 02F9           }
; 0000 02FA       }
;PCODE: $0000063D VOL: 0
;PCODE: $0000063E VOL: 0
;PCODE: $0000063F VOL: 0
;PCODE: $00000640 VOL: 0
;PCODE: $00000641 VOL: 0
; 0000 02FB 
; 0000 02FC 
; 0000 02FD     }
;PCODE: $00000642 VOL: 0
;PCODE: $00000643 VOL: 0
; 0000 02FE 
; 0000 02FF }
;PCODE: $00000644 VOL: 0
;PCODE: $00000645 VOL: 0
;PCODE: $00000646 VOL: 0
;
